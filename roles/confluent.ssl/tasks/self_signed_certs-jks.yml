---
- name: Copy CA Cert to Host
  copy:
    src: "generated_ssl_files/{{ssl_self_signed_ca_cert_filename}}"
    dest: "{{ca_cert_path}}"

- name: Copy CA Key to Host
  copy:
    src: "generated_ssl_files/{{ssl_self_signed_ca_key_filename}}"
    dest: "{{ca_key_path}}"

- name: Create Truststore and Import the CA Cert
  shell: |
    keytool -noprompt -keystore {{truststore_path}} \
      -alias CARoot \
      -import -file {{ca_cert_path}} \
      -storepass {{truststore_storepass}} \
      -keypass {{truststore_storepass}}

- name: Convert Truststore to BCFKS - FIPS
  shell: |
    keytool -importkeystore -v \
      -srckeystore {{truststore_path}} \
      -srcstorepass {{truststore_storepass}} \
      -srcalias CARoot \
      -destkeystore {{bcfks_truststore_path}} \
      -deststorepass {{truststore_storepass}} \
      -destalias CARoot \
      -deststoretype BCFKS \
      -providername BCFIPS \
      -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \
      -providerpath {% if installation_method == 'archive' %}{{archive_destination_path}}/confluent-{{confluent_package_version}}/{% else %}/usr/{% endif %}share/java/kafka/bc-fips-*.jar
  when: convert_to_bcfks|bool

- name: Create Keystore
  shell: |
    keytool -genkeypair -noprompt \
      -keyalg {{ssl_key_algorithm}} -keysize {{ssl_key_size}} \
      -alias {{inventory_hostname}} \
      -dname "CN={{service_name}},OU=TEST,O=CONFLUENT,L=PaloAlto,S=Ca,C=US" \
      -ext "SAN={{hostnames | cert_extension}}" \
      -keystore {{keystore_path}} \
      -storepass {{keystore_storepass}} \
      -keypass {{keystore_storepass}}

# - name: Export Key from Keystore
#   shell: |
#     openssl pkcs12 \
#         -in {{keystore_path}} \
#         -passin pass:{{keystore_storepass}} \
#         -nodes -nocerts \
#         -out {{key_path}}
#   when: export_certs|bool

- name: Create Certificate Signing Request
  shell: |
    keytool -keystore {{keystore_path}} \
      -alias {{inventory_hostname}} \
      -certreq -file /var/ssl/private/generation/client.csr \
      -ext "SAN={{hostnames | cert_extension}}" \
      -storepass {{keystore_storepass}} \
      -keypass {{keystore_storepass}}

- name: Create Openssl Config for SAN
  template:
    src: openssl-san.cnf.j2
    dest: /var/ssl/private/generation/openssl-san.cnf

- name: Sign CSR with the Certificate Authority
  shell: |
    openssl x509 -req -CA {{ca_cert_path}} \
      -CAkey {{ca_key_path}} \
      -in /var/ssl/private/generation/client.csr \
      -out {{cert_path}} \
      -days {{keystore_expiration_days}} -CAcreateserial \
      -passin pass:{{ssl_self_signed_ca_password}} \
      -extfile /var/ssl/private/generation/openssl-san.cnf \
      -extensions v3_req

- name: Import the CA cert into the Keystore
  shell: |
    keytool -noprompt -keystore {{keystore_path}} \
      -alias CARoot \
      -import -file {{ca_cert_path}} \
      -storepass {{keystore_storepass}} \
      -keypass {{keystore_storepass}}

- name: Create Cert Chain
  shell: |
    cat {{ca_cert_path}} {{cert_path}} > /var/ssl/private/generation/signed-cert-chain.crt

- name: Import the Signed Host Cert into the Keystore
  shell: |
    keytool -noprompt -keystore {{keystore_path}} \
      -alias {{inventory_hostname}} \
      -import -file /var/ssl/private/generation/signed-cert-chain.crt \
      -ext "SAN={{hostnames | cert_extension}}" \
      -storepass {{keystore_storepass}} \
      -keypass {{keystore_storepass}}

- name: Convert Keystore to BCFKS - FIPS
  shell: |
    keytool -importkeystore -v \
      -srckeystore {{keystore_path}} \
      -srcstorepass {{keystore_storepass}} \
      -srcalias {{inventory_hostname}} \
      -destkeystore {{bcfks_keystore_path}} \
      -deststorepass {{keystore_storepass}} \
      -destalias {{inventory_hostname}}  \
      -deststoretype BCFKS \
      -providername BCFIPS \
      -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \
      -providerpath {% if installation_method == 'archive' %}{{archive_destination_path}}/confluent-{{confluent_package_version}}/{% else %}/usr/{% endif %}share/java/kafka/bc-fips-*.jar
  when: convert_to_bcfks|bool
