---
- name: Copy CA Cert to Host
  copy:
    remote_src: "{{ssl_custom_certs_remote_src}}"
    src: "{{ssl_ca_cert_filepath}}"
    dest: "{{ca_cert_path}}"

- name: Copy Signed Cert to Host
  copy:
    remote_src: "{{ssl_custom_certs_remote_src}}"
    src: "{{ssl_signed_cert_filepath}}"
    dest: "{{cert_path}}"

- name: Copy Key to Host
  copy:
    remote_src: "{{ssl_custom_certs_remote_src}}"
    src: "{{ssl_key_filepath}}"
    dest: "{{key_path}}"

- name: Count Certificates in Ca Cert
  shell: |
    grep -c "END CERTIFICATE" {{ca_cert_path}}
  check_mode: false
  register: ca_cert_count_grep

- name: Set the Certificate Count Var
  set_fact:
    cert_count: "{{ca_cert_count_grep.stdout}}"

- name: Create Truststore and Import the CA Chain
  include_tasks: import_ca_chain.yml
  when: cert_count|int > 1

- name: Create Truststore and Import the CA Cert
  shell: |
    keytool -noprompt -keystore {{truststore_path}} \
      -storetype pkcs12 \
      -alias CARoot \
      -import -file {{ca_cert_path}} \
      -storepass {{truststore_storepass}} \
      -keypass {{truststore_storepass}}
  when: cert_count|int == 1

- name: Convert Truststore to BCFKS - FIPS
  shell: |
    keytool -importkeystore -v \
      -srckeystore {{truststore_path}} \
      -srcstorepass {{truststore_storepass}} \
      -srcalias CARoot \
      -srcstoretype PKCS12 \
      -destkeystore {{bcfks_truststore_path}} \
      -deststorepass {{truststore_storepass}} \
      -destalias CARoot \
      -deststoretype BCFKS \
      -providername BCFIPS \
      -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \
      -providerpath /usr/share/java/kafka/bc-fips-*.jar
  when:
    - cert_count|int == 1
    - convert_to_bcfks|bool

- name: Create Cert Chain
  shell: |
    cat {{ca_cert_path}} {{cert_path}} > /var/ssl/private/generation/signed-cert-chain.crt

- name: Put Key and Signed Cert into pkcs12 Format with Key Password
  shell: |
    openssl pkcs12 -export \
      -in /var/ssl/private/generation/signed-cert-chain.crt \
      -inkey {{key_path}} \
      {% if ssl_key_password is defined %}-passin pass:{{ssl_key_password}}{% endif %} \
      -out /var/ssl/private/generation/client.p12 \
      -name kafkassl \
      -passout pass:mykeypassword
  # when: ssl_key_password is defined

# - name: Put Key and Signed Cert into pkcs12 Format without Key Password
#   shell: |
#     openssl pkcs12 -export \
#       -in {{cert_path}} \
#       -inkey {{key_path}} \
#       -out /var/ssl/private/generation/client.p12 \
#       -name kafkassl \
#       -passout pass:mykeypassword
#   when: ssl_key_password is not defined

- name: Create Keystore
  shell: |
    keytool -importkeystore \
      -srckeystore /var/ssl/private/generation/client.p12 \
      -srcstoretype pkcs12 \
      -srcstorepass mykeypassword \
      -destkeystore {{keystore_path}} \
      -deststoretype pkcs12 \
      -deststorepass {{keystore_storepass}} \
      -destkeypass {{keystore_storepass}}

- name: Import the CA Cert into Keystore
  shell: |
    keytool -noprompt -keystore {{keystore_path}} \
      -storetype pkcs12 \
      -alias CARoot \
      -import -file {{ca_cert_path}} \
      -storepass {{keystore_storepass}} \
      -keypass {{keystore_storepass}}

- name: Convert Keystore to BCFKS - FIPS
  shell: |
    keytool -importkeystore -v \
      -srckeystore {{keystore_path}} \
      -srcstorepass {{keystore_storepass}} \
      -srcalias kafkassl \
      -srcstoretype PKCS12 \
      -destkeystore {{bcfks_keystore_path}} \
      -deststorepass {{keystore_storepass}} \
      -destalias {{inventory_hostname}}  \
      -deststoretype BCFKS \
      -providername BCFIPS \
      -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \
      -providerpath /usr/share/java/kafka/bc-fips-*.jar
  when: convert_to_bcfks|bool
