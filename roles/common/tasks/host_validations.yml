---
- name: Confirm Rhel Version Supported
  assert:
    that: ansible_distribution_major_version in redhat_supported_versions
    fail_msg: >-
      Rhel Version: {{ansible_distribution_major_version}} not in supported versions: {{redhat_supported_versions}}.
      To skip host validations, set validate_hosts to false.
  vars:
    redhat_supported_versions: ['7', '8']
  when: ansible_os_family == "RedHat"
  tags:
    - validate
    - validate_os_version

- name: Confirm Ubuntu Version Supported
  assert:
    that: ansible_distribution_major_version in ubuntu_supported_versions
    fail_msg: >-
      Ubuntu Version: {{ansible_distribution_major_version}} not in supported versions: {{ubuntu_supported_versions}}.
      To skip host validations, set validate_hosts to false.
  vars:
    ubuntu_supported_versions: ['16', '18', '20']
  when: ansible_distribution == "Ubuntu"
  tags:
    - validate
    - validate_os_version

- name: Confirm Debian Version Supported
  assert:
    that: ansible_distribution_major_version in debian_supported_versions
    fail_msg: >-
      Debian Version: {{ansible_distribution_major_version}} not in supported versions: {{debian_supported_versions}}.
      To skip host validations, set validate_hosts to false.
  vars:
    debian_supported_versions: ['9', '10']
  when: ansible_distribution == "Debian"
  tags:
    - validate
    - validate_os_version

- name: Check Internet Access for Confluent Packages/Archive
  uri:
    url: "{{confluent_common_repository_baseurl}}"
    status_code:
      - 200
      - 302
      - 307
  when: >
    ( installation_method == 'package' and repository_configuration == 'confluent') or
    ( installation_method == 'archive' and confluent_common_repository_baseurl in confluent_archive_file_source )
  ignore_errors: true
  register: internet_access_check
  tags:
    - validate
    - validate_internet_access

- name: Fail Provisioning because No Network Connectivity
  fail:
    msg: >-
      Failed to connect to Package Repository at {{confluent_common_repository_baseurl}} from Host.
      Confirm network connectivity. To skip host validations, set validate_hosts to false.
  when: internet_access_check.failed | default(False)

- name: Check /tmp directory details
  stat:
    path: "/tmp"
  register: path_exists
  tags:
    - validate
    - validate_tmp_access

- name: Assert /tmp is accessible
  assert:
    that: path_exists.stat.exists
    fail_msg: >-
      "The /tmp directory is not accessible by the Ansible user.  Please update your permissions on the /tmp directory or change
      the location for temporary files in ansible.cfg."
  tags:
    - validate
    - validate_tmp_access

- name: Validate disk space usage
  debug:
    msg:  >-
      "Not enough free disk space for package installation.  Minimum space required is {{ required_disk_space_mb }}MB, please free up more disk space
       to continue installation. To skip host validations, set validate_hosts to false."
  when: (item.size_available < required_disk_space_mb|float)
  with_items: "{{ ansible_mounts }}"
  tags:
    - validate
    - validate_disk_usage

- name: Retrieve SSL key hash on Local Host
  shell:
    cmd: openssl rsa -noout -modulus | openssl md5
    stdin: "{{ lookup('file', ssl_key_filepath) }}"
  register: key_hash_local
  delegate_to: localhost
  changed_when: false
  when:
    - ssl_custom_certs|bool and not ssl_custom_certs_remote_src|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"

- name: Register content of key file
  slurp:
    src: "{{ ssl_key_filepath }}"
  register: remote_key
  when:
    - ssl_custom_certs|bool and ssl_custom_certs_remote_src|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"

- name: Retrieve SSL key hash on Remote Host
  shell:
    cmd: openssl rsa -noout -modulus | openssl md5
    stdin: "{{ remote_key['results'][group_idx].content | b64decode }}"
  register: key_hash_remote
  changed_when: false
  when:
    - ssl_custom_certs|bool and ssl_custom_certs_remote_src|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"
  loop_control:
    index_var: group_idx

- name: Retrieve SSL cert hash on Local Host
  shell:
    cmd: openssl x509 -noout -modulus | openssl md5
    stdin: "{{ lookup('file', ssl_signed_cert_filepath) }}"
  register: cert_hash_local
  delegate_to: localhost
  changed_when: false
  when:
    - ssl_custom_certs|bool and not ssl_custom_certs_remote_src|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"

- name: Register content of cert file
  slurp:
    src: "{{ ssl_signed_cert_filepath }}"
  register: remote_cert
  when:
    - ssl_custom_certs|bool and ssl_custom_certs_remote_src|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"

- name: Retrieve SSL cert hash on Remote Host
  shell:
    cmd: openssl x509 -noout -modulus | openssl md5
    stdin: "{{ remote_cert['results'][group_idx].content | b64decode }}"
  register: cert_hash_remote
  changed_when: false
  when:
    - ssl_custom_certs|bool and ssl_custom_certs_remote_src|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"
  loop_control:
    index_var: group_idx

- name: get key hash
  set_fact:
    key_hash: "{{key_hash_remote if ssl_custom_certs_remote_src|bool else key_hash_local}}"

- name: get cert hash
  set_fact:
    cert_hash: "{{cert_hash_remote if ssl_custom_certs_remote_src|bool else cert_hash_local}}"

- name: Assert SSL key hash matches SSL cert hash
  assert:
    that: key_hash['results'][group_idx].stdout == cert_hash['results'][group_idx].stdout and not key_hash['results'][group_idx].stderr|length > 0
    fail_msg: >-
      "The MD5 value of the custom ssl key does not match the MD5 value of the custom certificate, indicating that the keys do no match
      and are incompatible.  Please review your keys and certs and confirm they are from the same source."
  when:
    - ssl_custom_certs|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"
  loop_control:
    index_var: group_idx

- name: Validate enough free memory for Zookeeper hosts
  assert:
    that: ansible_memory_mb.nocache.free > {{ required_total_memory_mb_zookeeper }}|float
    fail_msg: >-
      "Not enough memory to run Zookeeper. Only {{ ansible_memory_mb.nocache.free }}MB of free memory detected.
      Minimum memory required is {{ required_total_memory_mb_zookeeper }}MB, please add more memory to host
      or choose a different host to install Zookeeper to continue installation."
  when: groups['zookeeper'] is defined and inventory_hostname in groups['zookeeper']
  tags:
    - validate
    - validate_memory_usage
    - validate_memory_usage_zookeeper

- name: Validate enough free memory for Kafka Broker hosts
  assert:
    that: ansible_memory_mb.nocache.free > {{ required_total_memory_mb_kafka_broker }}|float
    fail_msg: >-
      "Not enough memory to run Kafka Broker. Only {{ ansible_memory_mb.nocache.free }}MB of free memory detected.
      Minimum memory required is {{ required_total_memory_mb_kafka_broker }}MB, please add more memory to host
      or choose a different host to install Kafka Broker to continue installation."
  when: groups['kafka_broker'] is defined and inventory_hostname in groups['kafka_broker']
  tags:
    - validate
    - validate_memory_usage
    - validate_memory_usage_kafka_broker

- name: Validate enough free memory for Kafka Connect hosts
  assert:
    that: ansible_memory_mb.nocache.free > {{ required_total_memory_mb_kafka_connect }}|float
    fail_msg: >-
      "Not enough memory to run Kafka Connect. Only {{ ansible_memory_mb.nocache.free }}MB of free memory detected.
      Minimum memory required is {{ required_total_memory_mb_kafka_connect }}MB, please add more memory to host
      or choose a different host to install Kafka Connect to continue installation."
  when: groups['kafka_connect'] is defined and inventory_hostname in groups['kafka_connect']
  tags:
    - validate
    - validate_memory_usage
    - validate_memory_usage_kafka_connect

- name: Validate enough free memory for Schema Registry hosts
  assert:
    that: ansible_memory_mb.nocache.free > {{ required_total_memory_mb_schema_registry }}|float
    fail_msg: >-
      "Not enough memory to run Schema Registry. Only {{ ansible_memory_mb.nocache.free }}MB of free memory detected.
      Minimum memory required is {{ required_total_memory_mb_schema_registry }}MB, please add more memory to host
      or choose a different host to install Kafka Connect to continue installation."
  when: groups['schema_registry'] is defined and inventory_hostname in groups['schema_registry']
  tags:
    - validate
    - validate_memory_usage
    - validate_memory_usage_schema_registry

- name: Validate enough free memory for KSQL hosts
  assert:
    that: ansible_memory_mb.nocache.free > {{ required_total_memory_mb_ksql }}|float
    fail_msg: >-
      "Not enough memory to run KSQL. Only {{ ansible_memory_mb.nocache.free }}MB of free memory detected.
      Minimum memory required is {{ required_total_memory_mb_ksql }}MB, please add more memory to host
      or choose a different host to install Kafka Connect to continue installation."
  when: groups['ksql'] is defined and inventory_hostname in groups['ksql']
  tags:
    - validate
    - validate_memory_usage
    - validate_memory_usage_ksql

- name: Validate enough free memory for Rest Proxy hosts
  assert:
    that: ansible_memory_mb.nocache.free > {{ required_total_memory_mb_kafka_rest }}|float
    fail_msg: >-
      "Not enough memory to run Kafka Rest Proxy. Only {{ ansible_memory_mb.nocache.free }}MB of free memory detected.
      Minimum memory required is {{ required_total_memory_mb_kafka_rest }}MB, please add more memory to host
      or choose a different host to install Rest Proxy to continue installation."
  when: groups['kafka_rest'] is defined and inventory_hostname in groups['kafka_rest']
  tags:
    - validate
    - validate_memory_usage
    - validate_memory_usage_kafka_rest_proxy

- name: Validate enough free memory for Control Center hosts
  assert:
    that: ansible_memory_mb.nocache.free > {{ required_total_memory_mb_control_center }}|float
    fail_msg: >-
      "Not enough memory to run Control Center. Only {{ ansible_memory_mb.nocache.free }}MB of free memory detected.
      Minimum memory required is {{ required_total_memory_mb_control_center }}MB, please add more memory to host
      or choose a different host to install Control Center to continue installation."
  when: groups['control_center'] is defined and inventory_hostname in groups['control_center']
  tags:
    - validate
    - validate_memory_usage
    - validate_memory_usage_control_center

- name: Validate enough free memory for Kafka Connect Replicator hosts
  assert:
    that: ansible_memory_mb.nocache.free > {{ required_total_memory_mb_kafka_connect_replicator }}|float
    fail_msg: >-
      "Not enough memory to run Kafka Connect Replicator. Only {{ ansible_memory_mb.nocache.free }}MB of free memory detected.
      Minimum memory required is {{ required_total_memory_mb_kafka_connect_replicator }}MB, please add more memory to host
      or choose a different host to install Kafka Connect Replicator to continue installation."
  when: groups['kafka_connect_replicator'] is defined and inventory_hostname in groups['kafka_connect_replicator']
  tags:
    - validate
    - validate_memory_usage
    - validate_memory_usage_kafka_connect_replicator
