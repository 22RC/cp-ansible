---
- name: Check if Config Exists ownership
  stat:
    path: "{{ config_path }}"
  register: config_stat

- name: Create Config Backup
  copy:
    src: "{{ config_path }}"
    dest: "{{ config_path }}-backup"
    remote_src: true
    mode: 0640
    owner: "{{secrets_file_owner}}"
    group: "{{secrets_file_group}}"
  when: config_stat.stat.exists

- name: Update Final Properties Dict and Create a Backup
  set_fact:
    properties_backup: "{{ final_properties }}"
    # Secrets Protection CLI needs all backslashes escaped by a backslash. This filter turns \ into \\.
    "{{ final_properties_dict_name }}": '{{ final_properties | regex_replace("\\", "\\\\") }}'

- name: Create Unmasked Config
  template:
    src: "{{ config_template }}"
    dest: "{{ config_path }}"
    mode: 0640
    owner: "{{secrets_file_owner}}"
    group: "{{secrets_file_group}}"

- name: Restore Final Properties Dict
  set_fact:
    "{{ final_properties_dict_name }}": "{{ properties_backup }}"

- name: Create Secrets Protection Directory
  file:
    path: "{{ ssl_file_dir_final }}"
    state: directory
    mode: 0755

- name: Copy security.properties file to Host
  copy:
    src: "{{ secrets_protection_security_file }}"
    dest: "{{ secrets_file }}"
    owner: "{{ secrets_file_owner }}"
    group: "{{ secrets_file_group }}"
    mode: 0640

- name: Load masterkey
  slurp:
    src: generated_ssl_files/masterkey
  delegate_to: localhost
  vars:
    ansible_connection: local
    ansible_become: false
  register: slurped_masterkey
  when: not secrets_protection_masterkey

- name: Save Master Encryption Key
  set_fact:
    secrets_protection_masterkey: "{{ slurped_masterkey.content|b64decode}}"
  when: not secrets_protection_masterkey

- name: Create Encyrpt Properties List
  set_fact:
    encryrpt_properties: "{{ final_properties | dict2items | map(attribute='key') | select('match', '.*password.*') 
      + final_properties | dict2items | map(attribute='key') | select('match', '.*basic.auth.user.info.*')
      + final_properties | dict2items | map(attribute='key') | select('match', 'ldap.java.naming.security.credentials')
      + properties if encrypt_passwords|bool else properties }}"

- name: Debug Properties to Mask
  debug: 
    var: encryrpt_properties
  run_once: true

- name: Encrypt Properties
  shell: |
    {{ confluent_cli_path }} secret file encrypt --config-file {{ config_path }} \
      --local-secrets-file {{ secrets_file }} \
      --remote-secrets-file {{ secrets_file }} \
      --config "{{ encryrpt_properties | join (',') }}"
  environment:
    CONFLUENT_SECURITY_MASTER_KEY: "{{ secrets_protection_masterkey }}"

# If config is different than the backup, need to restart
- name: Test for Config File Changes from Backup - Trigger Handler
  copy:
    src: "{{ config_path }}"
    dest: "{{ config_path }}-backup"
    remote_src: true
    mode: 0640
    owner: "{{ secrets_file_owner }}"
    group: "{{ secrets_file_group }}"
  notify: "{{handler}}"
  when: config_stat.stat.exists

- name: Remove Backup Config
  file:
    path: "{{ config_path }}-backup"
    state: absent
  when: config_stat.stat.exists

- name: First Time Creating Config - Trigger Handler
  command: /bin/true
  notify: "{{handler}}"
  when: not config_stat.stat.exists
